// Velocity = START
float velocity(float arg1, float arg2, char what){ // Rate of change of displacement
	if('v' == what || 'V' == what){
		float speed = arg1, time = arg2, velocity;
		// v = s/t
		return velocity = speed/time;
	}
	else if('s' == what || 'S' == what){
		float velocity = arg1, time = arg2, speed;
		// s = v * t
		return speed = velocity * time;
	}
	else if('t' == what || 'T' == what){
		float velocity = arg1, speed = arg2, time;
		// t = v / s
		return time = velocity/speed;
	}
}

float velocity1(float arg1,float arg2, char what[2]){ // Rate of change of displacement
	if("v" == what || "V" == what){
		float initialVelocity = arg1, finalVelocity = arg2, velocity;
		// v = vi + vf / 2
		return velocity = (initialVelocity + finalVelocity)/2;
	}
	else if("vi" == what || "Vi" == what || "vI" == what || "VI" == what){
		float velocity = arg1, finalVelocity = arg2, initialVelocity;
		// vi = (v - vf) * 2
		return initialVelocity = (velocity - finalVelocity) * 2;
	}
	else if("vf" == what || "Vf" == what || "vF" == what || "VF" == what){
		float velocity = arg1, initialVelocity = arg2, finalVelocity;
		//vf = (v - vi) * 2
		return finalVelocity = (velocity - initialVelocity) * 2;
	}
}
// Velocity = END
////////////////////////////////////////////////////////////////////////////////////////////////////////

// Acceleration = START
float acceleration(float arg1, float arg2, char what){ // rate of change on velocity
	if('A' == what || 'a' == what){
		float velocity = arg1, time = arg2, acceleration;
		// a = v/t
		return acceleration = velocity/time;
	}
	else if('s' == what || 'S' == what){
		float acceleration = arg1, time = arg2, velocity;
		// v = a * t
		return velocity = acceleration * time;
	}
	else if('t' == what || 'T' == what){
		float acceleration = arg1, velocity = arg2, time;
		// t = a / v
		return time = acceleration/velocity;
	}
}

float acceleration1(float arg1,float arg2, float arg3, char what[2] = "a"){ // rate of change on velocity
	if("a" == what || "A" == what){
		float finalVelocity = arg1, initialVelocity = arg2, time = arg3, acceleration;
		// a = vf - vi / t
		return acceleration = (finalVelocity - initialVelocity)/time;
	}
	/*else if("vi" == what || "Vi" == what || "vI" == what || "VI" == what){
		float acceleration = arg1, finalVelocity = arg2, time = arg3, initialVelocity;
		// vi = (a - vf) * t
		return initialVelocity = (acceleration - finalVelocity) * time;
	}*/
	else if("vf" == what || "Vf" == what || "vF" == what || "VF" == what){
		float acceleration = arg1, initialVelocity = arg2,time = arg3, finalVelocity;
		//vf = (a + vi) * t
		return finalVelocity = (acceleration + initialVelocity) * time;
	}
	else if("t" == what || "T" == what){
		float acceleration = arg1, finalVelocity = arg2,initialVelocity = arg3, time;
		//t = a / (vf -vi)
		return time = acceleration / (finalVelocity - initialVelocity);
	}
}
// Acceleration = END
//////////////////////////////////////////////////////////////////////////////////////////////////


// Equations of rectilinear motion = START
float finalVelocity(float arg1, float arg2, float arg3, char what[2] = "vf"){ // acceleration is uniform
	if("vf" == what || "Vf" == what || "vF" == what || "VF" == what){
		float initialVelocity = arg1, acceleration = arg2, time = arg3, finalVelocity;
		//vf = vi + at
		return finalVelocity = initialVelocity + (acceleration*time);
	}
	else if("a" == what || "A" == what){
		float finalVelocity = arg1, initialVelocity = arg2, time = arg3, acceleration;
		// a = vf - vi / t
		return acceleration = (finalVelocity - initialVelocity)/time;
	}
	else if("t" == what || "T" == what){
		float finalVelocity = arg1, initialVelocity = arg2,acceleration = arg3, time;
		//t = (vf -vi) / a
		return time = (finalVelocity - initialVelocity)/acceleration;
	}
	else if("vi" == what || "Vi" == what || "vI" == what || "VI" == what){
		float finalVelocity = arg1, acceleration = arg2, time = arg3, initialVelocity;
		// vi = vf - at
		return initialVelocity = finalVelocity - ( acceleration * time );
	}
}

float speed(float arg1, float arg2, float arg3, char what[2] = "s"){ //for bodies starting from rest vi = 0
	if("s" == what || "s" == what){
		float initialVelocity = arg1, time = arg2, acceleration = arg3, speed;
		// s = vi.t + 1/2.(a.t^2)
		return speed = (initialVelocity * time) + (1/2 * (acceleration * pow(time,2)));
	}
}

float accelerationSpeed(float arg1, float arg2, float arg3, char what[2] = "a"){
	if("a" == what || "A" == what){
		float speed = arg1, finalVelocity = arg2, initialVelocity = arg3, acceleration;
		return acceleration = (pow(finalVelocity,2) - pow(initialVelocity,2))/ (speed*2);
	}
}
// Equations of rectilinear motion = END
/////////////////////////////////////////////////////////////////////////////////////////////////////


float current(float valueOne, float valueTwo, char what){
	if(what == 'V' || what == 'v'){
		float _voltage, current  = valueOne, resistance = valueTwo;
		_voltage = current  * resistance;
		return _voltage;
	}
	else if(what == 'I' || what == 'i'){
		float _current, voltage = valueOne, resistance  = valueTwo;
		_current = voltage / resistance ;
		return _current;
	}
	else if(what == 'R' || what == 'r'){
		float _resistance , voltage = valueOne, current = valueTwo;
		_resistance  = voltage / current;
		return _resistance ;
	}
	return 0;
}

float force(float valueOne, float valueTwo, char what){
	if(what == 'F' || what == 'f'){
		float _force, mass = valueOne, acceleration = valueTwo;
		_force = mass * acceleration;
		return _force;
	}
	else if(what == 'A' || what == 'a'){
		float _acceleration, force = valueOne, mass = valueTwo;
		_acceleration = force / mass;
		return _acceleration;
	}
	else if(what == 'M' || what == 'm'){
		float _mass, force = valueOne, acceleration = valueTwo;
		_mass = force / acceleration;
		return _mass;
	}
	return 0;
}

int _tmain(int argc, _TCHAR* argv[])
{
	cout<< "Voltage = " << current(0.2,1000,'v') << endl;
	cout<< "Current = " << current(110,22000,'i') << endl;
	cout<< "Resistance  = " << current(220,5,'r') << endl;
  
  	cout<< "Force = " << force(4,3,'f') << endl;
	cout<< "Acceleration = " << force(8,2,'a') << endl;
	cout<< "Mass = " << force(15,3,'m') << endl;
	
	cout << "a = "  << accelerationSpeed(0.25,0,100) << " m/s^2" << endl;
	return 0;
}
